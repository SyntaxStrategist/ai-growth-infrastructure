-- Phase 2.2: Prompt Optimization System
-- Creates isolated prompt variant tracking and optimization tables
-- SAFE: No existing tables modified, completely additive

-- Enable Row Level Security
-- (Already enabled globally, but ensuring it's explicit)

-- 1. Prompt Registry Table
-- Tracks all prompt variants and their metadata
CREATE TABLE IF NOT EXISTS public.prompt_registry (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Core prompt identification
  prompt_name VARCHAR(100) NOT NULL, -- 'ai_enrichment_en', 'ai_enrichment_fr', etc.
  version VARCHAR(20) NOT NULL, -- '1.0.0', '1.1.0', etc.
  variant_id VARCHAR(50) NOT NULL, -- 'baseline', 'optimized_v1', 'ab_test_1', etc.
  
  -- Prompt content
  prompt_content TEXT NOT NULL, -- The actual prompt text
  prompt_type VARCHAR(50) NOT NULL, -- 'system', 'user', 'few_shot', 'chain_of_thought'
  language VARCHAR(10) NOT NULL, -- 'en', 'fr', 'auto'
  
  -- Optimization metadata
  optimization_strategy VARCHAR(100), -- 'baseline', 'few_shot', 'chain_of_thought', 'role_based', 'context_enhanced'
  parent_version VARCHAR(20), -- Version this was derived from
  generation_method VARCHAR(50), -- 'manual', 'ai_generated', 'evolutionary', 'ab_test'
  
  -- Performance tracking
  is_active BOOLEAN DEFAULT FALSE, -- Whether this variant is currently active
  is_baseline BOOLEAN DEFAULT FALSE, -- Whether this is the baseline version
  traffic_percentage DECIMAL(5,2) DEFAULT 0.0, -- Percentage of traffic to route to this variant
  
  -- Scoring and metrics
  overall_score DECIMAL(5,3) DEFAULT 0.0, -- Composite score (0.0 to 1.0)
  accuracy_score DECIMAL(5,3) DEFAULT 0.0, -- Accuracy-based score
  response_time_score DECIMAL(5,3) DEFAULT 0.0, -- Response time score
  consistency_score DECIMAL(5,3) DEFAULT 0.0, -- Consistency score
  user_satisfaction_score DECIMAL(5,3) DEFAULT 0.0, -- User satisfaction score
  
  -- Usage statistics
  total_uses INTEGER DEFAULT 0, -- Total number of times this prompt was used
  successful_uses INTEGER DEFAULT 0, -- Number of successful uses
  failed_uses INTEGER DEFAULT 0, -- Number of failed uses
  avg_response_time_ms INTEGER DEFAULT 0, -- Average response time
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  last_used_at TIMESTAMPTZ,
  activated_at TIMESTAMPTZ, -- When this variant was activated
  
  -- Metadata
  metadata JSONB, -- Additional context and configuration
  tags TEXT[], -- Tags for categorization and filtering
  
  -- Constraints
  UNIQUE(prompt_name, version, variant_id)
);

-- 2. Prompt Performance Tracking Table
-- Tracks individual prompt execution results
CREATE TABLE IF NOT EXISTS public.prompt_performance (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Link to prompt variant
  prompt_registry_id UUID NOT NULL REFERENCES public.prompt_registry(id) ON DELETE CASCADE,
  
  -- Execution context
  execution_id VARCHAR(100) NOT NULL, -- Unique identifier for this execution
  request_id VARCHAR(100), -- Link to original request
  client_id UUID REFERENCES public.clients(id), -- Optional: client-specific tracking
  
  -- Input data
  input_data JSONB, -- The input data used with this prompt
  input_hash VARCHAR(64), -- Hash of input for deduplication
  
  -- Output data
  output_data JSONB, -- The output generated by this prompt
  output_quality_score DECIMAL(5,3), -- Quality score for this specific output
  
  -- Performance metrics
  response_time_ms INTEGER NOT NULL, -- Response time in milliseconds
  token_count INTEGER, -- Number of tokens used
  cost_usd DECIMAL(10,6), -- Cost in USD (if applicable)
  
  -- Quality metrics
  accuracy_score DECIMAL(5,3), -- Accuracy score for this execution
  consistency_score DECIMAL(5,3), -- Consistency with expected format
  completeness_score DECIMAL(5,3), -- How complete the response is
  
  -- Error tracking
  error_occurred BOOLEAN DEFAULT FALSE,
  error_message TEXT,
  error_type VARCHAR(50), -- 'timeout', 'rate_limit', 'invalid_output', 'parsing_error'
  
  -- Feedback integration
  feedback_id UUID REFERENCES public.feedback_tracking(id), -- Link to feedback if available
  user_rating INTEGER, -- User rating 1-5 (if available)
  
  -- Timestamps
  executed_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB, -- Additional execution context
  environment VARCHAR(50) DEFAULT 'production' -- 'production', 'staging', 'test'
);

-- 3. Prompt A/B Testing Table
-- Tracks A/B test configurations and results
CREATE TABLE IF NOT EXISTS public.prompt_ab_tests (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Test identification
  test_name VARCHAR(100) NOT NULL,
  test_description TEXT,
  prompt_name VARCHAR(100) NOT NULL, -- Which prompt is being tested
  
  -- Test configuration
  control_variant_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  treatment_variant_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  
  -- Traffic allocation
  control_traffic_percentage DECIMAL(5,2) DEFAULT 50.0,
  treatment_traffic_percentage DECIMAL(5,2) DEFAULT 50.0,
  
  -- Test parameters
  min_sample_size INTEGER DEFAULT 100, -- Minimum samples before concluding
  max_duration_days INTEGER DEFAULT 7, -- Maximum test duration
  significance_level DECIMAL(5,3) DEFAULT 0.05, -- Statistical significance level
  
  -- Test status
  status VARCHAR(20) DEFAULT 'draft', -- 'draft', 'running', 'completed', 'cancelled'
  start_date TIMESTAMPTZ,
  end_date TIMESTAMPTZ,
  
  -- Results
  control_metrics JSONB, -- Control group metrics
  treatment_metrics JSONB, -- Treatment group metrics
  statistical_significance DECIMAL(5,3), -- P-value
  winner_variant_id UUID REFERENCES public.prompt_registry(id), -- Winning variant
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB,
  created_by VARCHAR(100) DEFAULT 'system' -- Who created this test
);

-- 4. Prompt Evolution History Table
-- Tracks how prompts evolve over time
CREATE TABLE IF NOT EXISTS public.prompt_evolution (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Evolution tracking
  parent_prompt_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  child_prompt_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  
  -- Evolution details
  evolution_type VARCHAR(50) NOT NULL, -- 'mutation', 'crossover', 'optimization', 'manual_edit'
  evolution_strategy VARCHAR(100), -- 'few_shot_enhancement', 'role_improvement', 'context_expansion'
  
  -- Performance comparison
  parent_performance JSONB, -- Parent prompt performance metrics
  child_performance JSONB, -- Child prompt performance metrics
  improvement_score DECIMAL(5,3), -- Measured improvement
  
  -- Evolution context
  feedback_data JSONB, -- Feedback that drove this evolution
  optimization_goals TEXT[], -- Goals for this evolution
  
  -- Timestamps
  evolved_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB,
  evolution_algorithm VARCHAR(50) -- Algorithm used for evolution
);

-- Indexes for Performance
-- Prompt Registry Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_registry_name_version 
ON public.prompt_registry (prompt_name, version);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_active 
ON public.prompt_registry (is_active) WHERE is_active = TRUE;

CREATE INDEX IF NOT EXISTS idx_prompt_registry_baseline 
ON public.prompt_registry (is_baseline) WHERE is_baseline = TRUE;

CREATE INDEX IF NOT EXISTS idx_prompt_registry_score 
ON public.prompt_registry (overall_score DESC);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_created_at 
ON public.prompt_registry (created_at);

-- Prompt Performance Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_performance_registry_id 
ON public.prompt_performance (prompt_registry_id);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_execution_id 
ON public.prompt_performance (execution_id);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_executed_at 
ON public.prompt_performance (executed_at);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_response_time 
ON public.prompt_performance (response_time_ms);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_quality_score 
ON public.prompt_performance (output_quality_score DESC);

-- A/B Testing Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_name 
ON public.prompt_ab_tests (test_name);

CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_status 
ON public.prompt_ab_tests (status);

CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_prompt_name 
ON public.prompt_ab_tests (prompt_name);

-- Evolution History Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_evolution_parent 
ON public.prompt_evolution (parent_prompt_id);

CREATE INDEX IF NOT EXISTS idx_prompt_evolution_child 
ON public.prompt_evolution (child_prompt_id);

CREATE INDEX IF NOT EXISTS idx_prompt_evolution_type 
ON public.prompt_evolution (evolution_type);

-- Row Level Security (RLS)
ALTER TABLE public.prompt_registry ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_performance ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_ab_tests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_evolution ENABLE ROW LEVEL SECURITY;

-- RLS Policies for prompt_registry
CREATE POLICY "Allow public read access to prompt_registry"
ON public.prompt_registry FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_registry"
ON public.prompt_registry FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated update to prompt_registry"
ON public.prompt_registry FOR UPDATE
USING (auth.role() = 'authenticated');

-- RLS Policies for prompt_performance
CREATE POLICY "Allow public read access to prompt_performance"
ON public.prompt_performance FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_performance"
ON public.prompt_performance FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- RLS Policies for prompt_ab_tests
CREATE POLICY "Allow public read access to prompt_ab_tests"
ON public.prompt_ab_tests FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_ab_tests"
ON public.prompt_ab_tests FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated update to prompt_ab_tests"
ON public.prompt_ab_tests FOR UPDATE
USING (auth.role() = 'authenticated');

-- RLS Policies for prompt_evolution
CREATE POLICY "Allow public read access to prompt_evolution"
ON public.prompt_evolution FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_evolution"
ON public.prompt_evolution FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Utility functions for prompt optimization
CREATE OR REPLACE FUNCTION get_prompt_performance_summary(
  p_prompt_name VARCHAR DEFAULT NULL,
  p_days_back INTEGER DEFAULT 30
)
RETURNS TABLE (
  prompt_name VARCHAR,
  variant_id VARCHAR,
  total_executions BIGINT,
  avg_response_time DECIMAL,
  avg_quality_score DECIMAL,
  success_rate DECIMAL,
  error_rate DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pr.prompt_name,
    pr.variant_id,
    COUNT(pp.id) as total_executions,
    AVG(pp.response_time_ms) as avg_response_time,
    AVG(pp.output_quality_score) as avg_quality_score,
    AVG(CASE WHEN pp.error_occurred = FALSE THEN 1.0 ELSE 0.0 END) as success_rate,
    AVG(CASE WHEN pp.error_occurred = TRUE THEN 1.0 ELSE 0.0 END) as error_rate
  FROM public.prompt_registry pr
  LEFT JOIN public.prompt_performance pp ON pr.id = pp.prompt_registry_id
  WHERE 
    (p_prompt_name IS NULL OR pr.prompt_name = p_prompt_name)
    AND (pp.executed_at IS NULL OR pp.executed_at >= NOW() - INTERVAL '1 day' * p_days_back)
  GROUP BY pr.prompt_name, pr.variant_id, pr.id
  ORDER BY total_executions DESC;
END;
$$ LANGUAGE plpgsql;

-- Function to get best performing prompt variant
CREATE OR REPLACE FUNCTION get_best_prompt_variant(
  p_prompt_name VARCHAR,
  p_min_executions INTEGER DEFAULT 10
)
RETURNS TABLE (
  prompt_name VARCHAR,
  variant_id VARCHAR,
  overall_score DECIMAL,
  total_executions BIGINT,
  avg_response_time DECIMAL,
  success_rate DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pr.prompt_name,
    pr.variant_id,
    pr.overall_score,
    COUNT(pp.id) as total_executions,
    AVG(pp.response_time_ms) as avg_response_time,
    AVG(CASE WHEN pp.error_occurred = FALSE THEN 1.0 ELSE 0.0 END) as success_rate
  FROM public.prompt_registry pr
  LEFT JOIN public.prompt_performance pp ON pr.id = pp.prompt_registry_id
  WHERE 
    pr.prompt_name = p_prompt_name
    AND pr.is_active = TRUE
  GROUP BY pr.prompt_name, pr.variant_id, pr.overall_score, pr.id
  HAVING COUNT(pp.id) >= p_min_executions
  ORDER BY pr.overall_score DESC, success_rate DESC
  LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- Function to update prompt scores based on performance
CREATE OR REPLACE FUNCTION update_prompt_scores()
RETURNS VOID AS $$
BEGIN
  UPDATE public.prompt_registry 
  SET 
    overall_score = (
      COALESCE(accuracy_score, 0.5) * 0.4 +
      COALESCE(response_time_score, 0.5) * 0.2 +
      COALESCE(consistency_score, 0.5) * 0.2 +
      COALESCE(user_satisfaction_score, 0.5) * 0.2
    ),
    total_uses = (
      SELECT COUNT(*) FROM public.prompt_performance 
      WHERE prompt_registry_id = prompt_registry.id
    ),
    successful_uses = (
      SELECT COUNT(*) FROM public.prompt_performance 
      WHERE prompt_registry_id = prompt_registry.id 
      AND error_occurred = FALSE
    ),
    failed_uses = (
      SELECT COUNT(*) FROM public.prompt_performance 
      WHERE prompt_registry_id = prompt_registry.id 
      AND error_occurred = TRUE
    ),
    avg_response_time_ms = (
      SELECT AVG(response_time_ms)::INTEGER FROM public.prompt_performance 
      WHERE prompt_registry_id = prompt_registry.id
    )
  WHERE id IN (
    SELECT DISTINCT prompt_registry_id 
    FROM public.prompt_performance 
    WHERE executed_at >= NOW() - INTERVAL '1 day'
  );
END;
$$ LANGUAGE plpgsql;

-- Grant execute permissions on utility functions
GRANT EXECUTE ON FUNCTION get_prompt_performance_summary TO authenticated;
GRANT EXECUTE ON FUNCTION get_best_prompt_variant TO authenticated;
GRANT EXECUTE ON FUNCTION update_prompt_scores TO authenticated;

-- Comments for documentation
COMMENT ON TABLE public.prompt_registry IS 'Phase 2.2: Registry of all prompt variants with versioning and scoring';
COMMENT ON TABLE public.prompt_performance IS 'Phase 2.2: Tracks individual prompt execution results and performance';
COMMENT ON TABLE public.prompt_ab_tests IS 'Phase 2.2: Manages A/B testing of prompt variants';
COMMENT ON TABLE public.prompt_evolution IS 'Phase 2.2: Tracks prompt evolution and optimization history';

COMMENT ON COLUMN public.prompt_registry.overall_score IS 'Composite score combining accuracy, response time, consistency, and user satisfaction';
COMMENT ON COLUMN public.prompt_registry.traffic_percentage IS 'Percentage of traffic to route to this variant (for A/B testing)';
COMMENT ON COLUMN public.prompt_performance.output_quality_score IS 'Quality score for the specific output generated';
COMMENT ON COLUMN public.prompt_ab_tests.statistical_significance IS 'P-value indicating statistical significance of test results';

-- Success message
DO $$
BEGIN
    RAISE NOTICE 'Phase 2.2: Prompt Optimization System tables created successfully';
    RAISE NOTICE 'Tables created: prompt_registry, prompt_performance, prompt_ab_tests, prompt_evolution';
    RAISE NOTICE 'Utility functions created: get_prompt_performance_summary, get_best_prompt_variant, update_prompt_scores';
    RAISE NOTICE 'All tables are isolated and non-breaking to existing systems';
END $$;
