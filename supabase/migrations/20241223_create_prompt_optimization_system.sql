-- Phase 2.2: Prompt Optimization System
-- Creates isolated prompt variant tracking and optimization tables
-- SAFE: No existing tables modified, completely additive

-- Enable Row Level Security
-- (Already enabled globally, but ensuring it's explicit)

-- 1. Prompt Registry Table
-- Tracks all prompt variants and their metadata
-- NOTE: Table already exists with different schema, skipping creation
-- CREATE TABLE IF NOT EXISTS public.prompt_registry (
--   id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--   prompt_name TEXT NOT NULL,
--   variant_version INTEGER NOT NULL,
--   prompt_text TEXT NOT NULL,
--   language TEXT DEFAULT 'en',
--   score NUMERIC DEFAULT 0,
--   usage_count INTEGER DEFAULT 0,
--   created_at TIMESTAMPTZ DEFAULT now(),
--   updated_at TIMESTAMPTZ DEFAULT now()
-- );

-- 2. Prompt Performance Tracking Table
-- Tracks individual prompt execution results
CREATE TABLE IF NOT EXISTS public.prompt_performance (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Link to prompt variant
  prompt_registry_id UUID NOT NULL REFERENCES public.prompt_registry(id) ON DELETE CASCADE,
  
  -- Execution context
  execution_id VARCHAR(100) NOT NULL, -- Unique identifier for this execution
  request_id VARCHAR(100), -- Link to original request
  client_id UUID REFERENCES public.clients(id), -- Optional: client-specific tracking
  
  -- Input data
  input_data JSONB, -- The input data used with this prompt
  input_hash VARCHAR(64), -- Hash of input for deduplication
  
  -- Output data
  output_data JSONB, -- The output generated by this prompt
  output_quality_score DECIMAL(5,3), -- Quality score for this specific output
  
  -- Performance metrics
  response_time_ms INTEGER NOT NULL, -- Response time in milliseconds
  token_count INTEGER, -- Number of tokens used
  cost_usd DECIMAL(10,6), -- Cost in USD (if applicable)
  
  -- Quality metrics
  accuracy_score DECIMAL(5,3), -- Accuracy score for this execution
  consistency_score DECIMAL(5,3), -- Consistency with expected format
  completeness_score DECIMAL(5,3), -- How complete the response is
  
  -- Error tracking
  error_occurred BOOLEAN DEFAULT FALSE,
  error_message TEXT,
  error_type VARCHAR(50), -- 'timeout', 'rate_limit', 'invalid_output', 'parsing_error'
  
  -- Feedback integration
  feedback_id UUID REFERENCES public.feedback_tracking(id), -- Link to feedback if available
  user_rating INTEGER, -- User rating 1-5 (if available)
  
  -- Timestamps
  executed_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB, -- Additional execution context
  environment VARCHAR(50) DEFAULT 'production' -- 'production', 'staging', 'test'
);

-- 3. Prompt A/B Testing Table
-- Tracks A/B test configurations and results
CREATE TABLE IF NOT EXISTS public.prompt_ab_tests (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Test identification
  test_name VARCHAR(100) NOT NULL,
  test_description TEXT,
  prompt_name VARCHAR(100) NOT NULL, -- Which prompt is being tested
  
  -- Test configuration
  control_variant_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  treatment_variant_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  
  -- Traffic allocation
  control_traffic_percentage DECIMAL(5,2) DEFAULT 50.0,
  treatment_traffic_percentage DECIMAL(5,2) DEFAULT 50.0,
  
  -- Test parameters
  min_sample_size INTEGER DEFAULT 100, -- Minimum samples before concluding
  max_duration_days INTEGER DEFAULT 7, -- Maximum test duration
  significance_level DECIMAL(5,3) DEFAULT 0.05, -- Statistical significance level
  
  -- Test status
  status VARCHAR(20) DEFAULT 'draft', -- 'draft', 'running', 'completed', 'cancelled'
  start_date TIMESTAMPTZ,
  end_date TIMESTAMPTZ,
  
  -- Results
  control_metrics JSONB, -- Control group metrics
  treatment_metrics JSONB, -- Treatment group metrics
  statistical_significance DECIMAL(5,3), -- P-value
  winner_variant_id UUID REFERENCES public.prompt_registry(id), -- Winning variant
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB,
  created_by VARCHAR(100) DEFAULT 'system' -- Who created this test
);

-- 4. Prompt Evolution History Table
-- Tracks how prompts evolve over time
CREATE TABLE IF NOT EXISTS public.prompt_evolution (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  
  -- Evolution tracking
  parent_prompt_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  child_prompt_id UUID NOT NULL REFERENCES public.prompt_registry(id),
  
  -- Evolution details
  evolution_type VARCHAR(50) NOT NULL, -- 'mutation', 'crossover', 'optimization', 'manual_edit'
  evolution_strategy VARCHAR(100), -- 'few_shot_enhancement', 'role_improvement', 'context_expansion'
  
  -- Performance comparison
  parent_performance JSONB, -- Parent prompt performance metrics
  child_performance JSONB, -- Child prompt performance metrics
  improvement_score DECIMAL(5,3), -- Measured improvement
  
  -- Evolution context
  feedback_data JSONB, -- Feedback that drove this evolution
  optimization_goals TEXT[], -- Goals for this evolution
  
  -- Timestamps
  evolved_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Metadata
  metadata JSONB,
  evolution_algorithm VARCHAR(50) -- Algorithm used for evolution
);

-- Indexes for Performance
-- Prompt Registry Indexes (Updated to match actual schema)
CREATE INDEX IF NOT EXISTS idx_prompt_registry_name_variant_version 
ON public.prompt_registry (prompt_name, variant_version);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_prompt_name 
ON public.prompt_registry (prompt_name);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_variant_version 
ON public.prompt_registry (variant_version);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_score 
ON public.prompt_registry (score DESC);

CREATE INDEX IF NOT EXISTS idx_prompt_registry_created_at 
ON public.prompt_registry (created_at);

-- Prompt Performance Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_performance_registry_id 
ON public.prompt_performance (prompt_registry_id);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_execution_id 
ON public.prompt_performance (execution_id);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_executed_at 
ON public.prompt_performance (executed_at);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_response_time 
ON public.prompt_performance (response_time_ms);

CREATE INDEX IF NOT EXISTS idx_prompt_performance_quality_score 
ON public.prompt_performance (output_quality_score DESC);

-- A/B Testing Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_name 
ON public.prompt_ab_tests (test_name);

CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_status 
ON public.prompt_ab_tests (status);

CREATE INDEX IF NOT EXISTS idx_prompt_ab_tests_prompt_name 
ON public.prompt_ab_tests (prompt_name);

-- Evolution History Indexes
CREATE INDEX IF NOT EXISTS idx_prompt_evolution_parent 
ON public.prompt_evolution (parent_prompt_id);

CREATE INDEX IF NOT EXISTS idx_prompt_evolution_child 
ON public.prompt_evolution (child_prompt_id);

CREATE INDEX IF NOT EXISTS idx_prompt_evolution_type 
ON public.prompt_evolution (evolution_type);

-- Row Level Security (RLS)
ALTER TABLE public.prompt_registry ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_performance ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_ab_tests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prompt_evolution ENABLE ROW LEVEL SECURITY;

-- RLS Policies for prompt_registry
CREATE POLICY "Allow public read access to prompt_registry"
ON public.prompt_registry FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_registry"
ON public.prompt_registry FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated update to prompt_registry"
ON public.prompt_registry FOR UPDATE
USING (auth.role() = 'authenticated');

-- RLS Policies for prompt_performance
CREATE POLICY "Allow public read access to prompt_performance"
ON public.prompt_performance FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_performance"
ON public.prompt_performance FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- RLS Policies for prompt_ab_tests
CREATE POLICY "Allow public read access to prompt_ab_tests"
ON public.prompt_ab_tests FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_ab_tests"
ON public.prompt_ab_tests FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated update to prompt_ab_tests"
ON public.prompt_ab_tests FOR UPDATE
USING (auth.role() = 'authenticated');

-- RLS Policies for prompt_evolution
CREATE POLICY "Allow public read access to prompt_evolution"
ON public.prompt_evolution FOR SELECT
USING (TRUE);

CREATE POLICY "Allow authenticated insert to prompt_evolution"
ON public.prompt_evolution FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Utility functions for prompt optimization
CREATE OR REPLACE FUNCTION get_prompt_performance_summary(
  p_prompt_name VARCHAR DEFAULT NULL,
  p_days_back INTEGER DEFAULT 30
)
RETURNS TABLE (
  prompt_name VARCHAR,
  variant_id VARCHAR,
  total_executions BIGINT,
  avg_response_time DECIMAL,
  avg_quality_score DECIMAL,
  success_rate DECIMAL,
  error_rate DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pr.prompt_name,
    pr.variant_id,
    COUNT(pp.id) as total_executions,
    AVG(pp.response_time_ms) as avg_response_time,
    AVG(pp.output_quality_score) as avg_quality_score,
    AVG(CASE WHEN pp.error_occurred = FALSE THEN 1.0 ELSE 0.0 END) as success_rate,
    AVG(CASE WHEN pp.error_occurred = TRUE THEN 1.0 ELSE 0.0 END) as error_rate
  FROM public.prompt_registry pr
  LEFT JOIN public.prompt_performance pp ON pr.id = pp.prompt_registry_id
  WHERE 
    (p_prompt_name IS NULL OR pr.prompt_name = p_prompt_name)
    AND (pp.executed_at IS NULL OR pp.executed_at >= NOW() - INTERVAL '1 day' * p_days_back)
  GROUP BY pr.prompt_name, pr.variant_id, pr.id
  ORDER BY total_executions DESC;
END;
$$ LANGUAGE plpgsql;

-- Function to get best performing prompt variant
CREATE OR REPLACE FUNCTION get_best_prompt_variant(
  p_prompt_name VARCHAR,
  p_min_executions INTEGER DEFAULT 10
)
RETURNS TABLE (
  prompt_name VARCHAR,
  variant_version INTEGER,
  score DECIMAL,
  total_executions BIGINT,
  avg_response_time DECIMAL,
  success_rate DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    pr.prompt_name,
    pr.variant_version,
    pr.score,
    COUNT(pp.id) as total_executions,
    AVG(pp.response_time_ms) as avg_response_time,
    AVG(CASE WHEN pp.error_occurred = FALSE THEN 1.0 ELSE 0.0 END) as success_rate
  FROM public.prompt_registry pr
  LEFT JOIN public.prompt_performance pp ON pr.id = pp.prompt_registry_id
  WHERE 
    pr.prompt_name = p_prompt_name
  GROUP BY pr.prompt_name, pr.variant_version, pr.score, pr.id
  HAVING COUNT(pp.id) >= p_min_executions
  ORDER BY pr.score DESC, success_rate DESC
  LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- Function to update prompt scores based on performance
CREATE OR REPLACE FUNCTION update_prompt_scores()
RETURNS VOID AS $$
BEGIN
  UPDATE public.prompt_registry 
  SET 
    score = (
      SELECT AVG(CASE WHEN pp.error_occurred = FALSE THEN 1.0 ELSE 0.0 END) 
      FROM public.prompt_performance pp
      WHERE pp.prompt_registry_id = prompt_registry.id
    ),
    usage_count = (
      SELECT COUNT(*) FROM public.prompt_performance 
      WHERE prompt_registry_id = prompt_registry.id
    ),
    updated_at = NOW()
  WHERE id IN (
    SELECT DISTINCT prompt_registry_id 
    FROM public.prompt_performance 
    WHERE executed_at >= NOW() - INTERVAL '1 day'
  );
END;
$$ LANGUAGE plpgsql;

-- Grant execute permissions on utility functions
GRANT EXECUTE ON FUNCTION get_prompt_performance_summary TO authenticated;
GRANT EXECUTE ON FUNCTION get_best_prompt_variant TO authenticated;
GRANT EXECUTE ON FUNCTION update_prompt_scores TO authenticated;

-- Comments for documentation
COMMENT ON TABLE public.prompt_registry IS 'Phase 2.2: Registry of all prompt variants with versioning and scoring';
COMMENT ON TABLE public.prompt_performance IS 'Phase 2.2: Tracks individual prompt execution results and performance';
COMMENT ON TABLE public.prompt_ab_tests IS 'Phase 2.2: Manages A/B testing of prompt variants';
COMMENT ON TABLE public.prompt_evolution IS 'Phase 2.2: Tracks prompt evolution and optimization history';

COMMENT ON COLUMN public.prompt_registry.score IS 'Performance score for this prompt variant';
COMMENT ON COLUMN public.prompt_registry.usage_count IS 'Number of times this variant has been used';
COMMENT ON COLUMN public.prompt_performance.output_quality_score IS 'Quality score for the specific output generated';
COMMENT ON COLUMN public.prompt_ab_tests.statistical_significance IS 'P-value indicating statistical significance of test results';

-- Success message
DO $$
BEGIN
    RAISE NOTICE 'Phase 2.2: Prompt Optimization System tables created successfully';
    RAISE NOTICE 'Tables created: prompt_registry, prompt_performance, prompt_ab_tests, prompt_evolution';
    RAISE NOTICE 'Utility functions created: get_prompt_performance_summary, get_best_prompt_variant, update_prompt_scores';
    RAISE NOTICE 'All tables are isolated and non-breaking to existing systems';
END $$;

